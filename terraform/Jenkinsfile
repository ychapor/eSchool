pipeline {
    agent any
    options {
        skipDefaultCheckout(true)
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('GitHub Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/azure-devops']],
                 userRemoteConfigs: [[credentialsId: 'eschool-github-ssh-key', url: 'git@github.com:ychapor/eSchool.git']]])
            }
        }
        stage('Configure tfstate storage parameters') {
            steps {
                sh '''
                    sed -i -r -e "
                    s|(resource_group_name.*)xxx|\\1$TF_RG_NAME|
                    s|(storage_account_name.*)xxx|\\1$TF_SA_NAME|
                    s|(container_name.*)xxx|\\1$TF_CONTAINER_NAME|
                    s|(key.*)xxx|\\1$TF_KEY|" ./terraform/main.tf
                '''
            }
        }
        stage ('Upload *.tfvars file') {
            steps {
                script{
                    def inputFile = input message: 'Please upload your terraform.tfvars file', parameters: [file(name: 'terraform.tfvars')]
                    writeFile(file: 'terraform/terraform.tfvars', text: inputFile.readToString())
                }
            }
        }
        stage('Terraform Plan') {
            options {
                azureKeyVault([
                    [envVariable: 'ARM_SUBSCRIPTION_ID', name: 'terraform-subscription-id', secretType: 'Secret'],
                    [envVariable: 'ARM_TENANT_ID', name: 'terraform-tenant-id', secretType: 'Secret'],
                    [envVariable: 'ARM_CLIENT_ID', name: 'terraform-client-id', secretType: 'Secret'],
                    [envVariable: 'ARM_CLIENT_SECRET', name: 'terraform-client-secret', secretType: 'Secret'],
                    [envVariable: 'ARM_ACCESS_KEY', name: 'terraform-blob-access-key', secretType: 'Secret']
                ])
            }
            steps {
                sh 'cd ./terraform && ./terraformw init; terraform plan -out=tfplan; terraform show -json tfplan | python3 -m json.tool'
            }
        }
        stage ('Approve Terraform Actions') {
            steps {
                script {
                    input message: "Please check the Terraform Plan and approve or abort performing actions"
                }
            }
        }
        stage('Terraform Apply') {
            options {
                azureKeyVault([
                    [envVariable: 'ARM_SUBSCRIPTION_ID', name: 'terraform-subscription-id', secretType: 'Secret'],
                    [envVariable: 'ARM_TENANT_ID', name: 'terraform-tenant-id', secretType: 'Secret'],
                    [envVariable: 'ARM_CLIENT_ID', name: 'terraform-client-id', secretType: 'Secret'],
                    [envVariable: 'ARM_CLIENT_SECRET', name: 'terraform-client-secret', secretType: 'Secret'],
                    [envVariable: 'ARM_ACCESS_KEY', name: 'terraform-blob-access-key', secretType: 'Secret']
                ])
            }
            steps {
                sh 'cd ./terraform && ./terraformw apply tfplan -no-color'
            }
        }
    }
}