pipeline {
    agent any
    stages {
        stage('SCM checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/azure-devops']], userRemoteConfigs: [[credentialsId: 'eschool-github-ssh-key', url: 'git@github.com:ychapor/eSchool.git']]])
            }
        }
        stage('Compile') {
            steps {
                withMaven {
                    sh 'mvn clean compile'
                }
            }
        }
        stage('Run tests') {
            steps {
                withMaven {
                    sh 'mvn test -Dtest=!academy.softserve.eschool.*.*IntegrationTest'
                }
            }
        }
        stage('SonarQube analysis') {
            options {
                azureKeyVault([[envVariable: 'SQ_TOKEN', name: 'sonarqube-token', secretType: 'Secret']])
            }
            steps {
                sh 'docker run -d --name sonarqube -p 9000:9000 \
	                -v sonarqube_conf:/opt/sonarqube/conf \
	                -v sonarqube_extensions:/opt/sonarqube/extensions \
	                -v sonarqube_logs:/opt/sonarqube/logs \
	                -v sonarqube_data:/opt/sonarqube/data \
	                sonarqube:8.9.5-community || docker start sonarqube'
	            sh 'while ! wget https://jenkins.chapor.ml/sq >/dev/null 2>&1; do sleep 1; done; sleep 10'
	            withMaven {
		            withSonarQubeEnv('sonarqube') {
                        sh 'mvn sonar:sonar \
                            -Dsonar.projectKey=eschool \
                            -Dsonar.host.url=https://jenkins.chapor.ml/sq \
                            -Dsonar.login=$SQ_TOKEN \
                            -Dsonar.exclusions=vendor/**,storage/**,resources/**,**/*.java \
                            -Dsonar.sources=$WORKSPACE'
		            }
	            }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
                sh 'docker stop sonarqube'
            }
        }
        stage('Build') {
            options {
                azureKeyVault([
                    [envVariable: 'DB_URL', name: 'eschool-db-url-fs', secretType: 'Secret'],
                    [envVariable: 'DB_USER', name: 'eschool-db-username', secretType: 'Secret'],
                    [envVariable: 'DB_PASS', name: 'eschool-db-password', secretType: 'Secret'],
                    [envVariable: 'LB_ADMIN_NAME', name: 'liquibase-admin-name', secretType: 'Secret'],
                    [envVariable: 'LB_ADMIN_PASS', name: 'liquibase-admin-password', secretType: 'Secret'],
                    [envVariable: 'PASSWORD_ENC_KEY', name: 'password-encoding-key', secretType: 'Secret']
              ])
            }
            steps {
                sh '''
                    sed -i -r -e "
                    s|(DATASOURCE_URL:).*(\\})|\\1$DB_URL\\2|
                    s|(DATASOURCE_USERNAME:).*(\\})|\\1$DB_USER\\2|
                    s|(DATASOURCE_PASSWORD:).*(\\})|\\1$DB_PASS\\2|
                    s|(ADMIN_USERNAME:).*(\\})|\\1$LB_ADMIN_NAME\\2|
                    s|(ADMIN_PASSWORD:).*(\\})|\\1$LB_ADMIN_PASS\\2|
                    s|(LOGGING_PATH:).*(\\})|\\1$LOG_PATH\\2|
                    s|(logging.level.academy.softserve.eschool=).*|\\1$LOG_LVL|
                    s|(PASSWORD_ENCODING_KEY:).*(\\})|\\1$PASSWORD_ENC_KEY\\2|
                    s|(ESCHOOL_APP_HOST:).*(\\})|\\1$APP_HOST\\2|" ./src/main/resources/application.properties
                '''
                withMaven {
                    sh 'mvn package -Dmaven.test.skip=true'
                }
            }
        }
    }
}